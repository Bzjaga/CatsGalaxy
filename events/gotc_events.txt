################################
#
# Galaxy of the Cat Events
#
###############################
namespace = gotc

# solovyov
country_event = {
	id = gotc.1

	hide_window = yes
	is_triggered_only = yes

	trigger = {
        capital_scope = { solar_system = { has_star_flag = solovyov } }
	}

	immediate = {
		event_target:vatnic_species_zombie = {
			set_slavery_type = {
				type = slavery_military
				country = root.owner
				cooldown = yes
			}
		}
		owner_main_species = {
			set_species_flag = solovyov_species
		}
	}
}

# kadyrov
planet_event = {
	id = gotc.4000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		solar_system = { has_star_flag = kadyrov }
	}

	immediate = {

		add_district_and_planet_size_if_needed_effect = {
			district = district_farming_uncapped
		}

		# We want a clean slate building-wise, but to keep the districts.
		remove_all_buildings = yes
		if = {
			limit = {
				owner = { is_subject = yes }
			}
			add_planet_devastation = 50
			add_modifier = {
				modifier = payback_debris_field
				days = 2880 # 8 years
			}
		}
		else = {
			add_planet_devastation = 33
			add_modifier = {
				modifier = payback_debris_field
				days = 2880 # 8 years
			}
			add_modifier = {
				modifier = payback_unified_purpose
				days = 7200
				clear_on_owner_change = yes
			}
		}
		while = {
			count = 6
			add_deposit = d_ship_debris_payback_blocker
		}
		# 3 jobs
		add_building = building_capital
		add_building = building_clinic
		add_building = building_research_lab_1
		ruin_building = building_research_lab_1
		add_building = building_mineral_purification_plant
		ruin_building = building_mineral_purification_plant
		add_building = building_energy_grid
		ruin_building = building_energy_grid

		# ambient objects, for decoration
		set_planet_flag = has_orbital_debris
		create_ambient_object = {
			type = "ancient_battlefield_object"
			use_3d_location = yes
			entity_offset_height = 10
			location = this
		}
		create_ambient_object = {
			type = "ancient_battlefield_02_object"
			use_3d_location = yes
			entity_offset_height = 0
			location = this
		}
		while = {
			count = 5
			create_ambient_object = {
				type = "small_debris_object"
				use_3d_location = yes
				entity_offset_height = { min = 10 max = -10 }
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 200
					angle = random
				}
			}
		}
		while = {
			count = 5
			create_ambient_object = {
				type = "abandoned_ship_2_object"
				use_3d_location = no
				entity_offset_height = { min = 20 max = -20 }
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 150
					angle = random
				}
			}
		}
		if = {
			limit = {
				num_pops > 18
			}
			while = {
				limit = { num_pops > 18 }
				random_owned_pop = {
					limit = {
						is_same_species = root.owner.species
					}
					kill_pop = yes
				}
			}
		}
		solar_system = {
			system_event = {
				id = gotc.4001
				days = 23040
			}
		}
	}
}

system_event = {
	id = gotc.4001
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		every_system_ambient_object = {
			limit = {
				OR = {
					is_ambient_object_type = ancient_battlefield_object
					is_ambient_object_type = ancient_battlefield_02_object
					is_ambient_object_type = small_debris_object
					is_ambient_object_type = abandoned_ship_2_object
				}
			}
			destroy_ambient_object = this
		}
		random_system_planet = {
			limit = { has_planet_flag = has_orbital_debris }
			remove_planet_flag = has_orbital_debris
		}
	}
}

#########################
# TEACHERS OF THE SHROUD
#########################

# Start / Setup event
country_event = {
	id = gotc.5601

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_imperial_vassal
        capital_scope = { solar_system = { has_star_flag = mraxist } }
		exists = event_target:shroudwalker_enclave_country #set up in initializers
	}

	immediate = {
		# Have met aliens (the Shroudwalkers)
		set_country_flag = first_contact_event
		set_country_flag = Story2 # Already encountered spacefarers

		# Get to know the Shroudwalkers from the start
		establish_communications_no_message = event_target:shroudwalker_enclave_country

		# Set up all necessary country flags
		set_country_flag = shroudwalker_enclave_diplomacy_engaged
		set_country_flag = shroudwalker_enclave_bought_shroud_beacon

		every_system = {
			limit = {
				has_star_flag = shroudwalker_enclave_system
			}
			root = { set_visited = prev }
		}
		if = {
			limit = {
				capital_star.solar_system = {
					any_system_planet = {
						uninhabitable_regular_planet = yes
					}
				}
			}
			capital_star.solar_system = {
				while = {
					count = 2
					random_system_planet = {
						limit = {
							uninhabitable_regular_planet = yes
							NOT = { has_modifier = terraforming_candidate }
						}
						weights = {
							base = 1
							modifier = {
								add = trigger:planet_size
							}
						}
						change_pc = pc_shrouded
						clear_planet_modifiers = yes
						clear_deposits = yes
					}
				}
			}
		}

		# Let them start researching Psionic Theory from the get-go
		add_research_option = tech_psionic_theory
    }
}

# Previous Leader dies, succession crisis
country_event = { # Overlord version
	id = gotc.5720

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_imperial_vassal_overlord
	}

	immediate = {
		heir = {
			save_event_target_as = overlord_heir
		}
		ruler = {
			save_event_target_as = overlord_ruler
			kill_leader = { show_notification = no }
		}
		country_event = {
			id = gotc.5729
			days = 10 #360
			#random = 1440
		}
		every_subject = {
			country_event = {
				id = origin.5725
			}
		}
	}
}
# Preparing a Dissolution of the Empire
country_event = {
	id = gotc.5729

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_imperial_vassal_overlord
	}

	immediate = {
		while = { # add fleet up to naval cap
			limit = { used_naval_capacity_percent < 0.95 }
			create_fleet_from_naval_cap = 0.1
		}
		every_system_within_border = {
			set_star_flag = ex_overlord_system
		}
		if = {
			limit = {
				event_target:origin_imperial_homeland = { has_planet_flag = overlord_soviet }
			}
			every_owned_planet = {
				limit = { is_capital = yes }
				clear_global_event_target = origin_imperial_homeland
				remove_planet_flag = overlord_soviet
				set_planet_flag = previous_imperial_capital
			}
			every_owned_planet = {
				limit = { has_planet_flag = post_imperial_capital }
				set_capital = yes
				save_global_event_target_as = origin_imperial_homeland
				set_planet_flag = overlord_soviet
			}
		}
		country_event = {
			id = gotc.5730
			days = 1
		}
	}
}

# Dissolution of the Empire
country_event = { # Overlord Version
	id = gotc.5730

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_imperial_vassal_overlord
	}

	immediate = {
		save_event_target_as = previous_overlord
		set_country_flag = origin_imperial_vassal_ex_overlord
		set_origin = origin_default
		every_megastructure = {
			limit = {
				is_megastructure_type = gateway_derelict
			}
			solar_system = {
				spawn_megastructure = {
					type = "gateway_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		if = {
			limit = {
				event_target:origin_imperial_homeland = { has_planet_flag = overlord_soviet }
			}
			set_empire_name = "Кукурузный Функционализм"
			clear_ethos = yes
			country_add_ethic = ethic_authoritarian
			country_add_ethic = ethic_fanatic_materialist
			change_government = {
				authority = auth_oligarchic
				remove_invalid_civics = yes
				civics = {
					civic = civic_functional_architecture
					civic = civic_corvee_system
					civic = civic_crafters
				}
			}
			change_country_flag = {
				icon={
					category="plantoid"
					file="plantoid_03.dds"
				}
				background={
					category="backgrounds"
					file="flag_BG_36.dds"
				}
				colors={
					"desert_yellow"
					"red"
					"black"
					"null"
				}
			}
			every_controlled_planet = {
				limit = { has_planet_flag = post_imperial_capital }
				set_name = "Целиноград"
			}
			ordered_system_within_border = {
				limit = { is_capital_system = yes }
				set_name = "Целиноград"
			}
			change_dominant_species = { species = event_target:post_imperial_species }
			create_leader = {
				# He's going to introduce you to the mother of Kuzma
				species = event_target:post_imperial_species
				class = official
				name = "Кукуруз"
				gender=male
				skill = 2
				set_age = 59
				traits = {
					trait = trait_ruler_architectural_sense
					trait = leader_trait_settler_3
					trait = leader_trait_stubborn
				}
			}
			set_male_ruler_title = "Десталинизатор"
			set_female_ruler_title = "Десталинизаторша"
			set_leader = last_created_leader
		}
		else_if = {
			limit = {
				event_target:origin_imperial_homeland = { has_planet_flag = overlord_post_soviet }
			}
			change_government = {
				authority = auth_dictatorial
				remove_invalid_civics = yes
				civics = {
					civic = civic_byzantine_bureaucracy
					civic = civic_police_state
					civic = civic_memorialist
				}
			}
		}
		remove_modifier = imperial_vassal_ai_modifier
		every_subject = { # Release and notify current subjects
			if = {
				limit = {
					is_ai = yes
				}
				set_subject_of = { who = none }
				if = {
					limit = {
						AND = {
							event_target:origin_imperial_homeland = { has_planet_flag = overlord_soviet }
							capital_scope = {
								solar_system = {
									has_star_flag = mao
								}
							}
						}
					}
					add_opinion_modifier = {
						modifier = opinion_cracked_my_world
						who = root
					}
				}
				else_if = {
					limit = {
						AND = {
							event_target:origin_imperial_homeland = { has_planet_flag = overlord_post_soviet }
							capital_scope = {
								solar_system = {
									has_star_flag = kadyrov
								}
							}
						}
					}
					capital_scope = {
						add_modifier = {
							modifier = payback_unified_purpose
							days = 7200
							clear_on_owner_change = yes
						}
					}
				}
			}
			country_event = { id = origin.5735 }
		}
		#capital_scope = { solar_system = { set_star_flag = ex_overlord_system } }
		every_owned_planet = {
			limit = { solar_system = { is_capital_system = no } }
			if = {
				limit = {
					solar_system = { is_owned_by = root }
				}
				create_imperial_splinter = yes
			}
		}
		while = {
			limit = {
				any_system_within_border = {
					NAND = {
						is_capital_system = yes
						any_country_neighbor_to_system = { has_country_flag = imperial_splinter }
					}
				}
			}
			every_playable_country = {
				limit = { has_country_flag = imperial_splinter }
				random_system_within_border = {
					limit = {
						#any_country_neighbor_to_system = { is_same_empire = root }
						any_neighbor_system = {
							is_owned_by = root
							is_capital_system = no
						}
					}
					random_neighbor_system = {
						limit = {
							is_owned_by = root
							is_capital_system = no
						}
						starbase = { set_owner = prevprevprev }
						#set_star_flag = ex_overlord_system
						#add_claims = { who = root num_of_claims = 1 show_notification = no}
					}
				}
			}
		}
		every_playable_country = {
			limit = { has_country_flag = origin_imperial_vassal_ex_overlord }
			# Survey every system of the former overlord
			every_system = {
				limit = { 
					has_star_flag = ex_overlord_system
					NOT = { is_owned_by = prev }
				}
				set_surveyed = { surveyed = yes surveyor = prev }
			}
			country_event = { id = gotc.5731 days = 1 }
		}

		create_fleet_from_naval_cap = 0.7

		every_playable_country = {
			limit = { has_country_flag = imperial_splinter }
			# Start a war with the previous Overlord
			declare_war = {
				target = root
				name = {
					key = "NAME_Imperial_War"
				}
				attacker_war_goal = wg_subjugation
			}
		}
	}
}

# Start Imperial Civil War
country_event = {
	id = gotc.5731

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# Add claims on every system of the former overlord
		every_system = {
			limit = { 
				has_star_flag = ex_overlord_system
				NOT = { is_owned_by = prev }
			}
			add_claims = { who = prev num_of_claims = 1 show_notification = yes }
			#set_star_flag = shall_be_claimed_by_@prev
		}
	}
}