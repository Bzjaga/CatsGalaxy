

generate_start_pops = {
	optimize_memory
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}

		if = { limit = { last_created_species = { is_species_class = MACHINE } }
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = { save_event_target_as = last_created_species }
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				while = {
					count = 6
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				while = {
					count = 9
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else = {
				while = {
					count = 12
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_limited
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_organic_trophy
				}
			}
			while = {
				count = 5
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_assimilator }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full_machine
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
			}
			while = {
				count = 10
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
			owner = {
				country_event = {
					id = syndaw.1
					days = 1
				}
			}
		}
	}

	if = {
		limit = { owner = { has_origin = origin_mechanists } }
		owner = {
			create_built_robot_species = yes
		}
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}
		every_owned_pop = {
			limit = {
				has_job = miner
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_power_drills
				add_trait = trait_robot_bulky
				add_trait = trait_robot_high_maintenance
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				has_job = farmer
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_harvesters
				add_trait = trait_robot_bulky
				add_trait = trait_robot_high_maintenance
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				has_job = technician
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_superconductive
				add_trait = trait_robot_bulky
				add_trait = trait_robot_high_maintenance
				add_traits_at_start_of_list = yes
			}
		}

		add_building = building_robot_assembly_plant
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = { #purges them instead
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
				}
			}
		}
		if = {
			limit = {
				owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}

		add_building = building_necrophage_elevation_chamber
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm #purges them instead
				is_lithoid_empire = no
			}
		}
		add_building = building_spawning_pool
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm
				is_lithoid_empire = yes
			}
		}
		add_district_and_planet_size_if_needed_effect = { district = district_mining }
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		add_building = building_clone_army_clone_vat
		add_building = building_clone_army_clone_vat
		planet_event = { id = clones.10 days = 1095 random = 720 }
	}
	if = {
		limit = { owner = { is_hive_empire = yes } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { has_valid_civic = civic_machine_servitor } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			num_pops < 6
		}

		while = {
			limit = { num_pops < 6 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			num_pops < 18
		}
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			count = 20
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		while = {
			count = 2
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
		while = {
			count = 4
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 10
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment
			}
		}
		if = {
			limit = {
				solar_system = { has_star_flag = solovyov }
			}
			root.owner = {
				country_event = { id = gotc.1 days = 1 } # vatnic_species_zombie slavery_type set to slavery_military
			}
		}
		else = {
			while = {
				count = 4
				random_owned_pop = {
					limit = {
						OR = {
							has_job = clerk
							has_job = technician
							has_job = miner
							has_job = farmer
						}
						is_robotic_species = no
					}
					modify_species = {
						species = this
						add_trait = trait_zombie
						add_traits_at_start_of_list = yes
					}
					if = {
						limit = {
							has_trait = trait_syncretic_proles
						}
						modify_species = {
							species = this
							remove_trait = trait_syncretic_proles
						}
					}
				}
			}
		}
	}
}

imperial_origin_start_effect = {
	# Main Backup
	if = { # Backup if the main system hasn't already been initialized
		limit = {
			NOT = { exists = event_target:origin_imperial_homeland_country }
		}
		# Find a random system, hopefully close to a player with the origin
		random_system = {
			limit = {
				has_owner = no
				has_special_star_flag_trigger = no
			}
			weights = {
				base = 1
				modifier = {
					factor = 100
					closest_system = {
						use_bypasses = no
						min_steps = 2
						max_steps = 4
						limit = {
							has_owner = yes
							owner = {
								has_origin = origin_imperial_vassal
							}
						}
					}
				}
			}
			# Start Spawning Systems
			set_spawn_system_batch = begin
			origin_spawn_system_effect = { INITIALIZER = overlord_system_init }
			# Main Empire
			event_target:origin_imperial_homeland.solar_system = {
				origin_spawn_system_effect = { INITIALIZER = overlord_system_2_init }
				origin_spawn_system_effect = { INITIALIZER = overlord_system_3_init }
			}
			# Vassals
			event_target:imperial_homeland_2.solar_system = { origin_spawn_system_effect = { INITIALIZER = overlord_system_4_init } }
			if = {
				limit = {
					NOT = {
						galaxy_size = tiny
					}
				}
				event_target:imperial_homeland_2.solar_system = { origin_spawn_system_effect = { INITIALIZER = overlord_system_5_init } }
			}
			if = {
				limit = {
					NOR = {
						galaxy_size = tiny
						galaxy_size = small
					}
				}
				event_target:imperial_homeland_3.solar_system = { origin_spawn_system_effect = { INITIALIZER = overlord_system_6_init } }
			}
			if = {
				limit = {
					NOR = {
						galaxy_size = tiny
						galaxy_size = small
						galaxy_size = medium
					}
				}
				event_target:imperial_homeland_3.solar_system = { origin_spawn_system_effect = { INITIALIZER = overlord_system_7_init } }
			}
			set_spawn_system_batch = end

			# Set up hyperlanes if they are missing
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_2.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_imperial_homeland.solar_system
			}
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_3.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_imperial_homeland.solar_system
			}
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_4.solar_system
				SECOND_STAR_SYSTEM = event_target:imperial_homeland_2.solar_system
			}
			if = {
				limit = {
					exists = event_target:imperial_homeland_5
				}
				imperial_origin_start_hyperlane_effect = {
					ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_5.solar_system
					SECOND_STAR_SYSTEM = event_target:imperial_homeland_2.solar_system
				}
			}
			if = {
				limit = {
					exists = event_target:imperial_homeland_6
				}
				imperial_origin_start_hyperlane_effect = {
					ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_6.solar_system
					SECOND_STAR_SYSTEM = event_target:imperial_homeland_3.solar_system
				}
			}
			if = {
				limit = {
					exists = event_target:imperial_homeland_7
				}
				imperial_origin_start_hyperlane_effect = {
					ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_7.solar_system
					SECOND_STAR_SYSTEM = event_target:imperial_homeland_3.solar_system
				}
			}
		}
	}
	else_if = {
		limit = { # Backup if any of the other main empire systems are missing
			OR = {
				NOT = { any_system = { has_star_flag = overlord_system_2_flag } }
				NOT = { any_system = { has_star_flag = overlord_system_3_flag } }
			}
		}
		event_target:origin_imperial_homeland.solar_system = {
			origin_spawn_system_effect = { INITIALIZER = overlord_system_2_init }
			origin_spawn_system_effect = { INITIALIZER = overlord_system_3_init }
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_2.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_imperial_homeland.solar_system
			}
			imperial_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_3.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_imperial_homeland.solar_system
			}
		}
	}

	# Vassal Backup
	if = { # Backup for vassal 1
		limit = {
			any_system = { has_star_flag = overlord_system_2_flag }
			NOT = { any_system = { has_star_flag = overlord_system_4_flag } }
		}
		imperial_origin_vassal_backup_effect = {
			SYSTEM_FLAG = overlord_system_2_flag
			INITIALIZER = overlord_system_4_init
			ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_4.solar_system
		}
	}
	if = { # Backup for vassal 2
		limit = {
			any_system = { has_star_flag = overlord_system_2_flag }
			NOR = {
				galaxy_size = tiny
				any_system = { has_star_flag = overlord_system_5_flag }
			}
		}
		imperial_origin_vassal_backup_effect = {
			SYSTEM_FLAG = overlord_system_2_flag
			INITIALIZER = overlord_system_5_init
			ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_5.solar_system
		}
	}
	if = { # Backup for vassal 3
		limit = {
			any_system = { has_star_flag = overlord_system_3_flag }
			NOR = {
				galaxy_size = tiny
				galaxy_size = small
				any_system = { has_star_flag = overlord_system_6_flag }
			}
		}
		imperial_origin_vassal_backup_effect = {
			SYSTEM_FLAG = overlord_system_3_flag
			INITIALIZER = overlord_system_6_init
			ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_6.solar_system
		}
	}
	if = { # Backup for vassal 4
		limit = {
			any_system = { has_star_flag = overlord_system_3_flag }
			NOR = {
				galaxy_size = tiny
				galaxy_size = small
				galaxy_size = medium
				any_system = { has_star_flag = overlord_system_7_flag }
			}
		}
		imperial_origin_vassal_backup_effect = {
			SYSTEM_FLAG = overlord_system_3_flag
			INITIALIZER = overlord_system_7_init
			ORIGINAL_STAR_SYSTEM = event_target:imperial_homeland_7.solar_system
		}
	}

	# Modifier to reduce influence
	event_target:origin_imperial_homeland_country = {
		add_modifier = {
			modifier = imperial_vassal_ai_modifier
			days = -1
		}
	}

	# Rival Trotsky
	if = {
		limit = {
            event_target:origin_imperial_homeland_country_2.capital_scope = {
                solar_system = {
                    has_star_flag = international
                }
            }
		}
		event_target:origin_imperial_homeland_country_2 = {
			set_country_flag = origin_imperial_vassal_rival_country
		}
	}
	# Rival Prigozhin
	else_if = {
		limit = {
            event_target:origin_imperial_homeland_country_2.capital_scope = {
                solar_system = {
                    has_star_flag = wagner
                }
            }
		}
		event_target:origin_imperial_homeland_country_2 = {
			set_country_flag = origin_imperial_vassal_rival_country
		}
	}
	# Rival Country
	else_if = {
		limit = {
			OR = {
				AND = {
					is_multiplayer = yes
					NOT = {
						count_country = {
							count >= 2
							limit = {
								is_ai = no
								has_origin = origin_imperial_vassal
							}
						}
					}
				}
				is_multiplayer = no
			}
		}
		random_country = {
			limit = {
				is_ai = yes
				has_origin = origin_imperial_vassal
			}
			set_country_flag = origin_imperial_vassal_rival_country
		}
	}

	# Startup event for vassals
	every_playable_country = {
		limit = { has_origin = origin_imperial_vassal }
		country_event = { id = origin.5700 }
		if = {
			limit = {
				is_ai = no
			}
			country_event = {
				id = origin.5703
				days = 1
			}
		}
		else = {
			country_event = { id = origin.5710 }
		}
	}
}

fear_of_the_dark_binary_planets = {
	save_event_target_as = fotd_country
	random_planet_within_border = {
		limit = {
			has_planet_flag = delete_me_planet
		}
		remove_planet = yes
	}
	random_planet_within_border = {
		limit = {
			has_planet_flag = haven_flag
		}
		save_global_event_target_as = fotd_seperatist_planet@prev
		set_planet_flag = fotd_seperatist_planet@prev
		if = {
			limit = {
				has_planet_flag = korea
			}
			create_fear_of_the_dark_country_korea = yes
			setup_fear_of_the_dark_pre_ftl_korea = yes
		}
		else = {
			create_fear_of_the_dark_country = yes
			setup_fear_of_the_dark_pre_ftl = yes
		}
		if = {
			limit = {
				has_planet_flag = planet_mars
			}
			set_mars_entity = yes
		}
	}
	random_planet_within_border = {
		limit = {
			has_planet_flag = divider_flag
		}
		add_deposit = d_alloys_5
	}
	random_planet_within_border = {
		limit = {
			has_planet_flag = divider_flag
		}
		create_mining_station = {
			owner = event_target:fotd_country
		}
	}
}